#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('streamTwitter:server');
var http = require('http');
var Twitter = require('twitter');
var MongoClient = require('mongodb').MongoClient;

/**
 * Program Variables
 */
var searchKeyword = "bubblegum";
var vancouverGeoLocation = '-123.2094,49.1212,-123.02472,49.29305'; // Vancouver and Richmond
var mongodbURL = "mongodb://localhost:27017/stream"
var dbStream = [];

// MongoDB configuration
MongoClient.connect(mongodbURL, function(err, db){
  if(!err) {
    dbStream = db.collection('stream');
    console.log("connected to MongoDB database...");
  }
  else{
    throw err;
  }
});

// Twitter configuration
if(!process.env.CONSUMER_KEY){
  var clientConfig = require('../clientConfig.js');
}
var client = new Twitter({
  consumer_key: process.env.CONSUMER_KEY,
  consumer_secret: process.env.CONSUMER_SECRET,
  access_token_key: process.env.ACCESS_TOKEN_KEY,
  access_token_secret: process.env.ACCESS_TOKEN_SECRET
});

// TODO: not working for tweets from mobile
client.stream('statuses/filter', {locations: vancouverGeoLocation}, function(stream) {
  stream.on('data', function(tweet) {
    if(tweet.text.indexOf(searchKeyword) > -1){
      dbStream.insert({'tweet':tweet.text});
    }
  });

  stream.on('error', function(error) {
    throw error;
  });
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
